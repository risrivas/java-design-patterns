##########################
# SOLID Design Principles
##########################
Single Responsibility Principle
Open-Closed Principle
Liskov Substitution Principle
Interface Segregation Principle
Dependency Inversion Principle


########################################
# Single Responsibility Principle (SRP)
########################################
- there should never be more than one reason for a class to change
- focused, single functionality
- addresses a specific concern

example:
- there is a class writing to a remote server
- if protocol changes from HTTP to HTTPS - class has to change
- if payload format changes from JSON to XML - class has to change
- if authentication is added in server - class has to change
=> thus there are more than 1 reason for the class to change - breaks the SRP

# Code: com.design.patterns.solid.singleresp
- UserController - it has a single responsibility
  - receive request and handover to other classes for business logic
  - then get the result and ship the response back to the sender
- Refactor it:
  - move the validation to separate class
  - move the user persistence to separate class


########################
# Open-Closed Principle
########################
- Software entities (classes, modules, methods, etc) should be open for extension but closed for modification
- Open for extension => means extend existing behavior
- Closed for modification => means existing code remains unchanged

example:
- there is a base class with methods
- should be able to write a derived class and override methods (open for extension)
- but should not be able to modify the base class methods (closed for modification)

# Code: com.design.patterns.solid.openclose


################################
# Liskov Substitution Principle
################################
- should be able to substitute base class objects with child class objects
- and this should not alter behavior/characteristics of program

- so for a base class - if any methods are written
- in the main class - we can call base object or derived object on these methods interchangeably without affecting the behavior

# Code: com.design.patterns.solid.liskov


##################################
# Interface Segregation Principle
##################################
- clients should not be forced to depend upon interfaces that they do not use
- avoid interface pollution - large interfaces, unrelated methods
- signs of interface pollution:
  - classes have empty method implementations
  - method implementations throw UnsupportedOperationException
  - method implementations return null or default/dummy values

# Code: com.design.patterns.solid.intersegrega



